package main

import (
	"fmt"
	"net/http"
	"os"
	"git.ventos.tk/gydos/pacmon/udp"
	"net"
	"strconv"
	"strings"
	"time"
	"io/ioutil"
)

const (
	port = 8080
	UDP_SERVER_COMMAND = "GyDOS: PACMON: server:"
	UDP_DISCOVER_COMMAND = "GyDOS: PACMON: discover"
)

var (
	servers []string
)

func handler(w http.ResponseWriter, r *http.Request) {

	var packagePath = "/var/cache/pacman/pkg" + r.URL.String()

	if _, err := os.Stat(packagePath); os.IsNotExist(err) {
		http.NotFound(w, r)
	} else {
		http.ServeFile(w, r, packagePath)
	}


	fmt.Println(r.URL)
}

func main() {

	// fmt.Println(udp.GetLocalIP())

	if len(os.Args) > 1 {
		if os.Args[1] == "setup" {
			go udp.ServeMulticastUDP(UDPDiscoverHandler)
			go udp.SendMulicast(UDP_DISCOVER_COMMAND)
			countdown()
		} else {
			server()
		}
	} else {
		fmt.Println("here")
		server()
	}

}

func server() {
	go udp.ServeMulticastUDP(UDPHandler)
	http.HandleFunc("/", handler)
  	http.ListenAndServe(":"+strconv.FormatInt(port, 10), nil)
}

func UDPHandler(src *net.UDPAddr, n int, b []byte) {
	var message = string(b[:n])

	if message == UDP_DISCOVER_COMMAND {
		udp.SendMulicast(UDP_SERVER_COMMAND + " " + udp.GetLocalIP() + ":" + strconv.FormatInt(port, 10))
	}
}

func UDPDiscoverHandler(src *net.UDPAddr, n int, b []byte) {
	var message = string(b[:n])

	if strings.HasPrefix(message, UDP_SERVER_COMMAND) {

		if strings.Split(message[len(UDP_SERVER_COMMAND) + 1:], ":")[0] != udp.GetLocalIP() {
			var server = "Server = http://" + message[len(UDP_SERVER_COMMAND)+1:]
			servers = append(servers, server)
		}

	}
}

func countdown() {
	time.Sleep(10 * time.Second)

	if len(servers) > 0 {

		var filecontent string

		for _, server := range servers {
			filecontent += server + "\n"
		}

		dat, err := ioutil.ReadFile("/etc/pacman.d/mirrorlist")
		if err != nil {
			fmt.Println("Couldn't read mirrorlist")
		} else {
			filecontent = "# Following list generated by pacmon\n##\n" + filecontent + "\n" + string(dat)

			err = ioutil.WriteFile("/etc/pacman.d/mirrorlist", []byte(filecontent), 0644)
			if err != nil {
				fmt.Println("Couldn't write to file: displaying contents:\n", filecontent)
			}
		}
	}


	os.Exit(0)
}
